name: CI

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.4.2'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.platform }}"
    runs-on: "${{ matrix.platform }}"

    strategy:
      matrix:
        platform: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -VV
          python -m pip install --upgrade virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

  coverage:
    name: "Test coverage"
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -VV
          python -m pip install --upgrade virtualenv tox

      - name: Run tests to collect coverage
        run: python -m tox -e coverage

      - name: Upload coverage
        uses: coverallsapp/github-action@v2
        with:
          path-to-lcov: ./coverage.lcov
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache

      - name: Install and configure Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --only main

      - name: Build package
        run: poetry build

      - name: Check long_description
        run: poetry run pip install twine && poetry run python -m twine check dist/*

  install-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    name: Verify dev env
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Install in dev mode
        run: python -m pip install -e .[dev]
      - name: Import package
        run: python -c 'import drf_yaml; print(drf_yaml.__version__)'
